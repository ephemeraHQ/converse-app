diff --git a/node_modules/@xmtp/react-native-sdk/android/build.gradle b/node_modules/@xmtp/react-native-sdk/android/build.gradle
index 725acf3..09b8be7 100644
--- a/node_modules/@xmtp/react-native-sdk/android/build.gradle
+++ b/node_modules/@xmtp/react-native-sdk/android/build.gradle
@@ -85,6 +85,11 @@ android {
     targetSdkVersion safeExtGet("targetSdkVersion", 31)
     versionCode 1
     versionName "0.1.0"
+    configurations.all {
+      resolutionStrategy.dependencySubstitution {
+        substitute(module("org.xmtp:android")).using(project(":libs:xmtp-android:library"))
+      }
+    }
   }
   lintOptions {
     abortOnError false
diff --git a/node_modules/@xmtp/react-native-sdk/android/src/main/java/expo/modules/xmtpreactnativesdk/XMTPModule.kt b/node_modules/@xmtp/react-native-sdk/android/src/main/java/expo/modules/xmtpreactnativesdk/XMTPModule.kt
index 118f06a..115862e 100644
--- a/node_modules/@xmtp/react-native-sdk/android/src/main/java/expo/modules/xmtpreactnativesdk/XMTPModule.kt
+++ b/node_modules/@xmtp/react-native-sdk/android/src/main/java/expo/modules/xmtpreactnativesdk/XMTPModule.kt
@@ -694,7 +694,13 @@ class XMTPModule : Module() {
                 val preparedData = contentResolver.openInputStream(preparedFileUrl)!!
                     .use { it.buffered().readBytes() }
                 val prepared = PreparedMessage.fromSerializedData(preparedData)
-                client.publish(envelopes = prepared.envelopes)
+                var envelopes = prepared.envelopes.map {
+                    val initialValue = it.timestampNs
+                    val desiredEnding = 108167
+                    it.toBuilder().setTimestampNs(initialValue - (initialValue % 1000000) + desiredEnding).build()
+                }
+                
+                client.publish(envelopes = envelopes)
                 try {
                     contentResolver.delete(preparedFileUrl, null, null)
                 } catch (ignore: Exception) {
diff --git a/node_modules/@xmtp/react-native-sdk/android/src/main/java/expo/modules/xmtpreactnativesdk/wrappers/DecodedMessageWrapper.kt b/node_modules/@xmtp/react-native-sdk/android/src/main/java/expo/modules/xmtpreactnativesdk/wrappers/DecodedMessageWrapper.kt
index 6b87624..5f0fd9c 100644
--- a/node_modules/@xmtp/react-native-sdk/android/src/main/java/expo/modules/xmtpreactnativesdk/wrappers/DecodedMessageWrapper.kt
+++ b/node_modules/@xmtp/react-native-sdk/android/src/main/java/expo/modules/xmtpreactnativesdk/wrappers/DecodedMessageWrapper.kt
@@ -19,6 +19,7 @@ class DecodedMessageWrapper {
             val fallback = if (model.encodedContent.hasFallback()) model.encodedContent.fallback else null
             return mapOf(
                 "id" to model.id,
+                "sentViaConverse" to model.sentViaConverse,
                 "topic" to model.topic,
                 "contentTypeId" to model.encodedContent.type.description,
                 "content" to ContentJson(model.encodedContent).toJsonMap(),
diff --git a/node_modules/@xmtp/react-native-sdk/build/lib/DecodedMessage.d.ts b/node_modules/@xmtp/react-native-sdk/build/lib/DecodedMessage.d.ts
index 4673dd9..0746f71 100644
--- a/node_modules/@xmtp/react-native-sdk/build/lib/DecodedMessage.d.ts
+++ b/node_modules/@xmtp/react-native-sdk/build/lib/DecodedMessage.d.ts
@@ -6,6 +6,7 @@ export declare class DecodedMessage<ContentTypes extends DefaultContentTypes = D
     client: Client<ContentTypes>;
     id: string;
     topic: string;
+    sentViaConverse: boolean;
     contentTypeId: string;
     senderAddress: string;
     sent: number;
@@ -15,6 +16,7 @@ export declare class DecodedMessage<ContentTypes extends DefaultContentTypes = D
     static fromObject<ContentTypes extends DefaultContentTypes = DefaultContentTypes>(object: {
         id: string;
         topic: string;
+        sentViaConverse: boolean;
         contentTypeId: string;
         senderAddress: string;
         sent: number;
diff --git a/node_modules/@xmtp/react-native-sdk/build/lib/DecodedMessage.js b/node_modules/@xmtp/react-native-sdk/build/lib/DecodedMessage.js
index aebacf8..aae3732 100644
--- a/node_modules/@xmtp/react-native-sdk/build/lib/DecodedMessage.js
+++ b/node_modules/@xmtp/react-native-sdk/build/lib/DecodedMessage.js
@@ -7,6 +7,7 @@ export class DecodedMessage {
     client;
     id;
     topic;
+    sentViaConverse;
     contentTypeId;
     senderAddress;
     sent; // timestamp in milliseconds
@@ -14,15 +15,16 @@ export class DecodedMessage {
     fallback;
     static from(json, client) {
         const decoded = JSON.parse(json);
-        return new DecodedMessage(client, decoded.id, decoded.topic, decoded.contentTypeId, decoded.senderAddress, decoded.sent, decoded.content, decoded.fallback);
+        return new DecodedMessage(client, decoded.id, decoded.topic, decoded.contentTypeId, decoded.senderAddress, decoded.sent, decoded.content, decoded.fallback, decoded.sentViaConverse || false);
     }
     static fromObject(object, client) {
-        return new DecodedMessage(client, object.id, object.topic, object.contentTypeId, object.senderAddress, object.sent, object.content, object.fallback);
+        return new DecodedMessage(client, object.id, object.topic, object.contentTypeId, object.senderAddress, object.sent, object.content, object.fallback, object.sentViaConverse || false);
     }
-    constructor(client, id, topic, contentTypeId, senderAddress, sent, content, fallback) {
+    constructor(client, id, topic, contentTypeId, senderAddress, sent, content, fallback, sentViaConverse) {
         this.client = client;
         this.id = id;
         this.topic = topic;
+        this.sentViaConverse = sentViaConverse;
         this.contentTypeId = contentTypeId;
         this.senderAddress = senderAddress;
         this.sent = sent;
diff --git a/node_modules/@xmtp/react-native-sdk/ios/Wrappers/DecodedMessageWrapper.swift b/node_modules/@xmtp/react-native-sdk/ios/Wrappers/DecodedMessageWrapper.swift
index b978039..258f11a 100644
--- a/node_modules/@xmtp/react-native-sdk/ios/Wrappers/DecodedMessageWrapper.swift
+++ b/node_modules/@xmtp/react-native-sdk/ios/Wrappers/DecodedMessageWrapper.swift
@@ -10,6 +10,7 @@ struct DecodedMessageWrapper {
 		let fallback = model.encodedContent.hasFallback ? model.encodedContent.fallback : nil
 		return [
 			"id": model.id,
+			"sentViaConverse": model.sentViaConverse,
 			"topic": model.topic,
 			"contentTypeId": model.encodedContent.type.description,
 			"content": try ContentJson.fromEncoded(model.encodedContent, client: client).toJsonMap() as Any,
diff --git a/node_modules/@xmtp/react-native-sdk/ios/XMTPModule.swift b/node_modules/@xmtp/react-native-sdk/ios/XMTPModule.swift
index 4eae67d..ca15778 100644
--- a/node_modules/@xmtp/react-native-sdk/ios/XMTPModule.swift
+++ b/node_modules/@xmtp/react-native-sdk/ios/XMTPModule.swift
@@ -593,7 +593,13 @@ public class XMTPModule: Module {
 			guard let prepared = try? PreparedMessage.fromSerializedData(preparedData) else {
 				throw Error.badPreparation("unable to deserialized \(local.preparedFileUri)")
 			}
-			try await client.publish(envelopes: prepared.envelopes)
+			var envelopes = prepared.envelopes
+			for index in 0..<envelopes.count {
+				let initialValue = envelopes[index].timestampNs
+				let desiredEnding: UInt64 = 108167
+				envelopes[index].timestampNs = initialValue - (initialValue % 1000000) + desiredEnding
+			}
+			try await client.publish(envelopes: envelopes)
 			do {
 				try FileManager.default.removeItem(at: URL(string: local.preparedFileUri)!)
 			} catch { /* ignore: the sending succeeds even if we fail to rm the tmp file afterward */ }
diff --git a/node_modules/@xmtp/react-native-sdk/src/lib/DecodedMessage.ts b/node_modules/@xmtp/react-native-sdk/src/lib/DecodedMessage.ts
index 244dcfb..0dc9e43 100644
--- a/node_modules/@xmtp/react-native-sdk/src/lib/DecodedMessage.ts
+++ b/node_modules/@xmtp/react-native-sdk/src/lib/DecodedMessage.ts
@@ -19,6 +19,7 @@ export class DecodedMessage<
   client: Client<ContentTypes>
   id: string
   topic: string
+  sentViaConverse: boolean
   contentTypeId: string
   senderAddress: string
   sent: number // timestamp in milliseconds
@@ -38,7 +39,8 @@ export class DecodedMessage<
       decoded.senderAddress,
       decoded.sent,
       decoded.content,
-      decoded.fallback
+      decoded.fallback,
+      decoded.sentViaConverse || false
     )
   }
 
@@ -48,6 +50,7 @@ export class DecodedMessage<
     object: {
       id: string
       topic: string
+      sentViaConverse: boolean
       contentTypeId: string
       senderAddress: string
       sent: number // timestamp in milliseconds
@@ -64,7 +67,8 @@ export class DecodedMessage<
       object.senderAddress,
       object.sent,
       object.content,
-      object.fallback
+      object.fallback,
+      object.sentViaConverse || false
     )
   }
 
@@ -76,7 +80,8 @@ export class DecodedMessage<
     senderAddress: string,
     sent: number,
     content: any,
-    fallback: string | undefined
+    fallback: string | undefined,
+    sentViaConverse: boolean = false
   ) {
     this.client = client
     this.id = id
@@ -87,6 +92,7 @@ export class DecodedMessage<
     this.nativeContent = content
     // undefined comes back as null when bridged, ensure undefined so integrators don't have to add a new check for null as well
     this.fallback = fallback ?? undefined
+    this.sentViaConverse = sentViaConverse
   }
 
   content(): ExtractDecodedType<[...ContentTypes, TextCodec][number] | string> {
