const simpleGit = require("simple-git");
const { Octokit } = require("@octokit/rest");
const git = simpleGit();

async function main() {
  try {
    const { GITHUB_REF, GITHUB_REPOSITORY, GITHUB_TOKEN } = process.env;
    const octokit = new Octokit({ auth: GITHUB_TOKEN });
    const [owner, repo] = GITHUB_REPOSITORY.split("/");

    // Extract the branch that was just pushed
    const updatedBranch = GITHUB_REF.replace("refs/heads/", "");
    console.log(`Updated branch: ${updatedBranch}`);

    // Determine the list of release branches
    const releaseBranches = await getBranchesMatchingPattern("release/");

    // Sort release branches (assuming semantic versioning)
    releaseBranches.sort(compareReleaseBranches);

    // Find the next release branch
    const currentIndex = releaseBranches.indexOf(updatedBranch);
    let nextBranch = null;

    if (currentIndex !== -1 && currentIndex < releaseBranches.length - 1) {
      nextBranch = releaseBranches[currentIndex + 1];
      console.log(`Next release branch: ${nextBranch}`);
    } else {
      // No more release branches, proceed to feature branches
      const featureBranches = await getBranchesMatchingPattern("feature/");

      for (const featureBranch of featureBranches) {
        const rebaseResult = await rebaseBranch(updatedBranch, featureBranch);

        if (!rebaseResult) {
          await createIssue(octokit, owner, repo, updatedBranch, featureBranch);
        } else {
          console.log(
            `Successfully rebased ${featureBranch} onto ${updatedBranch}`
          );
        }
      }
    }

    // Attempt to rebase nextBranch onto updatedBranch
    const rebaseResult = await rebaseBranch(updatedBranch, nextBranch);

    if (!rebaseResult) {
      // Rebase failed due to conflicts, create an issue
      await createIssue(octokit, owner, repo, updatedBranch, nextBranch);
    } else {
      console.log(`Successfully rebased ${nextBranch} onto ${updatedBranch}`);
    }
  } catch (error) {
    console.error("An error occurred:", error.message);
    process.exit(1);
  }
}

async function getBranchesMatchingPattern(pattern) {
  const branches = await git.branch(["-r"]);
  return branches.all
    .map((branch) => branch.replace("origin/", ""))
    .filter((branch) => branch.startsWith(pattern));
}

function compareReleaseBranches(a, b) {
  // Extract version numbers and compare
  const versionA = a.replace("release/", "").split(".").map(Number);
  const versionB = b.replace("release/", "").split(".").map(Number);

  for (let i = 0; i < Math.max(versionA.length, versionB.length); i++) {
    const numA = versionA[i] || 0;
    const numB = versionB[i] || 0;
    if (numA !== numB) {
      return numA - numB;
    }
  }
  return 0;
}

async function rebaseBranch(baseBranch, targetBranch) {
  try {
    await git.fetch();

    // Checkout target branch
    await git.checkout(targetBranch);

    // Pull latest changes
    await git.pull("origin", targetBranch, { "--ff-only": null });

    // Attempt rebase
    await git.rebase([baseBranch]);

    // Push rebased branch
    await git.push("origin", targetBranch, { "--force-with-lease": null });

    return true;
  } catch (error) {
    if (error.message.includes("CONFLICT")) {
      console.error(
        `Conflicts occurred while rebasing ${targetBranch} onto ${baseBranch}`
      );
      await git.rebase(["--abort"]);
      return false;
    } else {
      throw error;
    }
  }
}

async function createIssue(octokit, owner, repo, baseBranch, targetBranch) {
  const issueTitle = `Conflict: Rebase ${targetBranch} onto ${baseBranch}`;
  const issueBody = `An automatic rebase of **${targetBranch}** onto **${baseBranch}** failed due to conflicts. Please resolve the conflicts manually.

**Base Branch**: \`${baseBranch}\`
**Target Branch**: \`${targetBranch}\`

<details>
<summary>Rebase attempt output</summary>

\`\`\`
[Rebase output and conflict details can be included here]
\`\`\`

</details>

---

*This issue was generated by an automated workflow.*
`;

  await octokit.rest.issues.create({
    owner,
    repo,
    title: issueTitle,
    body: issueBody,
    labels: ["rebase-conflict"],
  });

  console.log(
    `Created issue for conflict between ${baseBranch} and ${targetBranch}`
  );
}

main();
