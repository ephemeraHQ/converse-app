---
description: Logging guidelines
globs: 
---
## Use logger over console.log

```typescript
// ❌ Bad: Using console.log
console.log("User logged in", { userId: "123", timestamp: Date.now() });

// ✅ Good: Using logger with template literals
logger.debug(
  `User logged in - userId: ${userId} at ${new Date().toISOString()}`
);
```

## Use Template Literals for Inline Logging

```typescript
// ❌ Bad: Object-based logging
logger.debug("[buildXmtpClient] Starting to build XMTP client", {
  address,
  inboxId,
});

// ✅ Good: Inline template literal logging
logger.debug(
  `[buildXmtpClient] Starting to build XMTP client with address: ${address} and inboxId: ${inboxId}`
);
```

## Error Logging

```typescript
// ❌ Bad: Generic error message
logger.error("Error occurred");

// ✅ Good: Detailed error context
logger.error(
  `[fetchUserProfile] Failed to fetch user ${userId} - Error: ${error.message}`
);
```

## Debug Logging

```typescript
// ❌ Bad: Unclear context and mixed logging styles
logger.debug("Processing...");
console.log(data);

// ✅ Good: Clear context and consistent style
logger.debug(
  `[processUserData] Processing user ${userId} with ${data.items.length} items`
);
```
