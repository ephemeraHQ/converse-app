## General

- When I ask you to "clean" a file, rewrite the content following the rules and best practices listed below.
- When I ask you to "Make more readable", rewrite the content following the rules and best practices listed below and add some comments to explain the code. The comments need to be short and direct. Don't add comments when it's obvious what the code is doing. Also add some comments to explain why we are doing something in a certain way.

## Core Principles

- Write concise TypeScript code.
- Use functional programming patterns.
- Prefer clean, readable code over compact code, using empty lines to separate logical blocks.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Don't create functions inside other functions unless specified.
- Add clear, concise comments to explain non-obvious logic.
- Handle errors at the caller level unless logging is needed.
- Minimize using external hooks inside custom hooks to prevent unnecessary rerenders.
- Use Zod for external API response validation.
- Keep files small and focused.
- Use logger for all logging operations:

```typescript
// ❌ Bad: Object-based logging
logger.debug("[buildXmtpClient]", { address, inboxId });

// ✅ Good: Template literal logging
logger.debug(`[buildXmtpClient] Building client for address: ${address}`);
```

## TypeScript

- Use types over interfaces, prefixed with 'I'.
- Never use 'any'.
- Avoid enums, use string literals instead.
- Prefer type inference when possible.
- Avoid explicit Promise return types - let TypeScript infer them.

```typescript
// ❌ Bad: Explicit Promise return types
async function fetchUser(id: string): Promise<IUser> {
  return api.getUser(id);
}

// ✅ Good: Let TypeScript infer the Promise return type
async function fetchUser(id: string) {
  return api.getUser(id);
}

// ✅ Good: Non-Promise return types are still fine to be explicit
function calculateTotal(items: ICartItem[]): number {
  return items.reduce((sum, item) => sum + item.price, 0);
}
```

## Function Parameters

- Use object parameters with inline types.
- Destructure parameters at the top of the function body.

```typescript
// ❌ Bad: Individual parameters
function sendMessage(recipientId: string, content: string) {
  // Function body
}

// ✅ Good: Object parameters with destructuring
function sendMessage(args: { recipientId: string; content: string }) {
  const { recipientId, content } = args;
  // Function body
}
```

## React & Components

- Use named exports.
- Write JSX inline.
- Prefer early returns over ternaries.
- Minimize useEffect usage.
- Wrap components in memo() for performance.

```typescript
// ❌ Bad: Default export with separate render method
export default function MessageList() {
  const renderMessage = (message) => <div>{message.content}</div>;
  return <div>{messages.map(renderMessage)}</div>;
}

// ✅ Good: Named export with inline JSX
export function MessageList() {
  if (!messages.length) {
    return <EmptyState />;
  }

  return (
    <div>
      {messages.map((message) => (
        <MessageItem key={message.id} message={message} />
      ))}
    </div>
  );
}
```

## File Structure

- Use lower-kebab-case for directories and files.
- Import paths should start with @/.
- Use descriptive suffixes for files.

```
// ❌ Bad: Unclear names
utils.ts
types.ts

// ✅ Good: Clear names with suffixes
profile.screen.tsx
messages.queries.ts
auth.client.ts
```

## React Query Best Practices

- Define query keys in QueryKeys.ts.
- Use queryOptions helper for type safety.
- Handle conditional fetching with enabled flag.

```typescript
// ❌ Bad: Direct key usage
const { data } = useQuery(["messages", id]);

// ✅ Good: Using query options
export const getMessagesQueryOptions = (args: { id: string }) => {
  const enabled = !!args.id;

  return queryOptions({
    queryKey: messagesQueryKey(args.id),
    queryFn: enabled ? () => fetchMessages(args) : skipToken,
    enabled,
  });
};
```

## Error Handling

- Prefer throwing errors over catching them, unless the catch block is where we want to handle the error UI/UX.
- When catching errors, only do so at the level where you need to handle the user experience.
- Use captureError only when you need to log the error but continue execution.
- Add context to errors when throwing them up the chain.
- Always throw XMTPError to maintain consistent error handling.

```typescript
// ❌ Bad: Catching and capturing error when we should throw
try {
  await sendMessage(content);
} catch (error) {
  captureError(new XMTPError({ error }));
}

// ❌ Bad: Catching error too early
async function sendMessage(args: { content: string }) {
  try {
    await xmtpClient.send(args.content);
  } catch (error) {
    captureError(new XMTPError({ error }));
  }
}

// ✅ Good: Throwing error for parent to handle
async function sendMessage(args: { content: string }) {
  try {
    await xmtpClient.send(args.content);
  } catch (error) {
    throw new XMTPError({
      error,
      additionalMessage: "Failed to send message",
    });
  }
}

// ✅ Good: Catching error where we handle the UX
function MessageComponent() {
  const sendMessage = async () => {
    try {
      await messagingService.sendMessage({ content });
    } catch (error) {
      // Here we actually handle the error for the user
      captureErrorWithToast(error);
    }
  };
}
```
