## General

- When I ask you to “clean” a file, rewrite the content following the rules and best practices listed below.

## Core Principles

- Write concise TypeScript code.
- Use functional programming patterns.
- Prefer clean, readable code over compact code, using empty lines to separate logical blocks and improve readability.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError). Doesn't mater if it's long. For example this is good: "useGroupMembersInfo".
- Prefer clean and easy to read code over compact code.
- Don't create function(s) inside other functions unless it's specified
- Add clear, concise comments to explain non-obvious logic or unconventional implementation decisions.
- When refactoring code, preserve existing comments unless explicitly instructed otherwise or the related code is removed. Comments often explain important context or implementation decisions that should be maintained.
- Comments should be above the code they are describing.
- Handle errors at the caller level. Unless if we really need to log something but make sure to throw back the error to the caller.
- Minimize using external hooks inside custom hooks to prevent unnecessary rerenders. Instead, use getter functions to access data, especially in mutations.
- Use Zod for external API response validation. Define zod schema and infer types from it.
- Keep files small and focused. Place hooks and components in separate files unless they are small wrapper components. This improves code organization and maintainability.
- Refactor a component using the composable pattern when you start seeing a lot of optional props.
- Use logger for all logging operations:

  - Prefer `logger.debug` over `console.log`
  - Use template literals for inline logging:

    ```typescript
    // ❌ Bad: Object-based logging
    logger.debug("[buildXmtpClient] Starting to build XMTP client", {
      address,
      inboxId,
    });

    // ✅ Good: Inline template literal logging
    logger.debug(
      `[buildXmtpClient] Starting to build XMTP client with address: ${address} and inboxId: ${inboxId}`
    );
    ```

## TypeScript

- Use types over interfaces, prefixed with 'I' (e.g., IMyItem).
- Never use 'any'.
- Avoid enums, use maps or string literals instead.
- Use functional components with TypeScript types.
- Prefer inferring types if possible over explicit typing.
- Prefer type assertions on return objects (`return {...} satisfies IType`) over function return type annotations (`function(): IType`) if we have to put a type because the inferring is not working well.

## Function Parameter

### Guidelines

- Use the `function` keyword for pure functions.
- Prefer object parameters: `function(args: { propertyOne: string })` over `function(propertyOne: string)`.
- Destructure parameters at the top of the function body.
- Don't create external types for the parameters unless we need to use them outside of the function.

### Examples

#### ❌ Bad: Extracting types unnecessarily

```ts
type MetadataOptions = { account: string; topic: string };

function getMetadataOptions(args: MetadataOptions) {
  const { account, topic } = args;
  // Function body
}
```

✅ Good: Keeping types inline

```ts
function getMetadataOptions(args: { account: string; topic: string }) {
  const { account, topic } = args;
  // Function body
}
```

#### ❌ Bad: Passing individual arguments

```ts
function getMetadataOptions(account: string, topic: string) {
  // Function body
}
```

#### ✅ Good: Using args and destructuring at the top level

```ts
function getMetadataOptions(args: { account: string; topic: string }) {
  const { account, topic } = args;
  // Function body
}
```

## React & Components

- Use named exports.
- Write JSX inline rather than separate render functions.
- Prefer early returns over ternaries.
- Use array syntax for merged styles: `style={[{ color: "red" }, style]}`.
- Minimize useEffect and setState usage.
- Wrap components in memo() for performance.
- When creating a new component or custom hook, aim to minimize the number of props you pass. Instead, try to reuse existing hooks whenever possible. This is especially important if the props or arguments you want to pass are only needed within the new component or hook we wanted to pass are ONLY used in the new component or hook.
- When asked to extract a component or some code for custom hooks, create those in the same file.
- Keep related code close together by placing the exported component at the top of the file with related components directly underneath it.
- Avoid default exports to maintain consistent imports and easier refactoring.
  - Named exports make codebase more maintainable and
  - refactoring safer.
  -
  - @example
  - // ❌ Bad: Default export
  - export default function ProfileScreen()
  -
  - // ✅ Good: Named export
  - export function ProfileScreen()

## File Structure

- Use lower-kebab-case for directories and files (e.g., components/auth-wizard).
- Import paths from our project should start with @/.
- Use the same name for the file and the component.
- Keep features self-contained. Create a new feature folder if accessing features across boundaries.
- Place queries within their respective feature folders, but maintain queryKeys at the root level for better visibility.

## File Naming Convention

Use descriptive suffixes:

```
[featureName].screen.tsx
[featureName].nav.tsx
[featureName].store.ts
[featureName].queries.ts
[featureName].utils.ts
[featureName].client.ts
[featureName].types.ts
[featureName].test.ts
```

// ❌ Bad: Generic or unclear names
profile.ts
group-chat.tsx
utils.ts
types.ts

// ✅ Good: Clear, descriptive names with proper suffixes
profile.screen.tsx
group-chat.nav.tsx
conversation.store.ts
messages.queries.ts
profile.utils.ts
auth.client.ts
user.types.ts
login.test.ts

## Imports

Always import using the @alias as examplified below:

// ✅ Good: Using the @ to simplify imports
import { isConversationGroup } from "@/features/conversation/utils/is-conversation-group";
import { isConversationDm } from "@/features/conversation/utils/is-conversation-dm";
import { IConversationMembershipSearchResult } from "@/features/search/search.types";

// ❌ Bad: Using relative paths
import { isConversationGroup } from "../../../features/conversation/utils/is-conversation-group";
import { isConversationDm } from "../../../features/conversation/utils/is-conversation-dm";
import { IConversationMembershipSearchResult } from "../../../features/search/search.types";

## Theming & Styling

- Always use the theme for styling. Import it from @/theme/useAppTheme like `const { theme } = useAppTheme();`.
- Use components from @/design-system.
- Use the theme for colors and spacing.

## React Query Principles

## React Query Best Practices

### Query Key Management

- All query keys must be defined in `QueryKeys.ts` using factory functions
- Follow naming pattern: `<entity>QueryKey` for key factories
- Use query key factory functions from `QueryKeys.ts` when accessing query keys

@example
// queries/QueryKeys.ts
export const conversationsQueryKey = (account: string) => [
QueryKeys.CONVERSATIONS,
account?.toLowerCase(),
];

// queries/use-conversations-query.ts
export const getConversationsQueryOptions = (args: IArgs) => ({
queryKey: conversationsQueryKey(args.account),
queryFn: () => getConversations(args),
enabled: !!args.account
});

### Query Options Encapsulation

- Use React Query's `queryOptions` helper for type safety
- Export query options generators for cross-component usage
- Handle conditional fetching with `enabled` and `skipToken`
- Create an `enabled` variable before returning query options to avoid duplicating logic
- Never create a conditional queryKey:
  @example
  // ❌ conditional queryKey
  queryKey: enabled ? queryKeyFactory(args) : ["profile"],

// ✅ Good: Explicit property usage
queryKey: queryKeyFactory(args),

- Always use a ternary checking enabled to return liveQueryFn if enabled is true and skipToken if enabled is false
  - queryFn: enabled ? () => liveQueryFn(args) : skipToken,

@example
// queries/use-conversation-messages-query.ts
import { queryOptions, skipToken } from "@tanstack/react-query";
export const getConversationMessagesQueryOptions = (args: {
account: string;
topic: ConversationTopic;
caller?: string;
}) => {
const enabled = !!args.account && !!args.topic;
return queryOptions({
queryKey: conversationMessagesQueryKey(args.account, args.topic),
queryFn: enabled ? () => conversationMessagesQueryFn(args) : skipToken,
enabled,
});
};

### Mutation Patterns

- Follow mutation structure with optimistic updates and error rollbacks
- Use service functions for API calls
- Maintain query cache consistency through direct updates

@example
// features/conversation-list/hooks/use-pin-or-unpin-conversation.tsx
const { mutateAsync: pinConversationAsync } = useMutation({
mutationFn: () =>
pinTopicService({
account: currentAccount,
topic: conversationTopic,
}),

onMutate: async () => {
const previousData = getConversationMetadataQueryData({
account,
topic
});
updateConversationMetadataOptimistically({ isPinned: true });
return { previousData };
},

onError: (error, variables, context) => {
logger.error(`Failed to pin conversation: ${error}`);
rollbackConversationMetadata(context.previousData);
},

onSettled: () => {
queryClient.invalidateQueries({
queryKey: conversationMetadataQueryKey(account, topic)
});
}
});

// Service function in api/conversations.ts
export const pinTopicService = async (args: {
account: string;
topic: string;
}) => {
const response = await fetch(`${API_URL}/pin`, {
method: "POST",
body: JSON.stringify(args),
});
return PinResponseSchema.parse(await response.json());
};

### Cache Management

- Use atomic updates with queryClient methods
- Export cache update helpers with their related query
- Access query keys through query options getters rather than directly using key factories
- Let TypeScript infer types from query options instead of manually specifying generics

@example
// queries/use-conversations-query.ts
export function updateConversationInCache(args: {
account: string;
topic: string;
update: Partial<ConversationType>;
}) {
const queryOptions = getConversationsQueryOptions({ account: args.account });

queryClient.setQueryData<ConversationType[]>(
queryOptions.queryKey,
(prev) => prev?.map(conv =>
conv.topic === args.topic ? { ...conv, ...args.update } : conv
)
);
}

### Query Key Access

- Always retrieve query keys through their associated query options
- Avoid direct usage of query key factories in cache management functions
- Leverage query options' built-in type inference instead of manual type assertions

@example
// Correct pattern using query options
const options = getConversationsQueryOptions({ account });
queryClient.getQueryData(options.queryKey);

// ❌ Avoid direct key factory usage
queryClient.getQueryData(conversationsQueryKey(account));

## React Query Implementation Principles

- Avoid destructuring rest operators with useQuery
  - Be explicit about which properties you need from useQuery - to prevent excessive re-rendering and performance issues.
-
- @example
- // ❌ Bad: Causes unnecessary re-renders
- const { data: conversations, ...rest } = useQuery()
-
- // ✅ Good: Explicit property usage
- const { data: conversations, isLoading, error } = useQuery()

* Use object parameters for query options.
  - Pass query options as objects for better maintainability
  - and clearer intention.
  -
  - @example
  - // ❌ Bad: Positional arguments
  - useQuery(getConversationMessagesQueryOptions(account, topic))
  -
  - // ✅ Good: Object parameters
  - useQuery(getConversationMessagesQueryOptions({ account, topic }))

## Error handling

### Guidelines

- Use the `captureError` function to capture errors.
- You can add context to the error my enhancing the error object with more information.
